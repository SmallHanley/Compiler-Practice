/* Definition section */
%{
    #include "common.h"
    #include "y.tab.h"	/* header file generated by bison */
    extern YYSTYPE yylval;

    #define YY_NO_UNPUT
    #define YY_NO_INPUT
%}


/* Define regular expression label */
letter [a-zA-Z_]
digit [0-9]
id {letter}+({letter}|{digit})*
inumber {digit}+
fnumber ({digit}*\.{digit}+)
string \"([^"]|(\\\"))*\"
comment_c ("/*")([^("*/")]|\*|("//"))*("*/")
comment_cpp ("//")(.)*

%x CMT
%x STR
%option yylineno

/* Rules section */
%%
"+"         { return ADD; }
"-"         { return SUB; }
"*"         { return MUL; }
"/"         { return QUO; }
"%"         { return REM; }
"++"        { return INC; }
"--"        { return DEC; }
">"         { return GTR; }
"<"         { return LSS; }
">="        { return GEQ; }
"<="        { return LEQ; }
"=="        { return EQL; }
"!="        { return NEQ; }
"="         { return ASSIGN; }
"+="        { return ADD_ASSIGN; }
"-="        { return SUB_ASSIGN; }
"*="        { return MUL_ASSIGN; }
"/="        { return QUO_ASSIGN; }
"%="        { return REM_ASSIGN; }
"&&"        { return AND; }
"||"        { return OR; }
"!"         { return NOT; }
"("         { return LPAREN; }
")"         { return RPAREN; }
"["         { return LBRACK; }
"]"         { return RBRACK; }
"{"         { return LBRACE; }
"}"         { return RBRACE; }
";"         { return SEMICOLON; }
","         { return COMMA; }
"print"     { return PRINT; }
"return"    { return RETURN; }
"if"        { return IF; }
"else"      { return ELSE; }
"for"       { return FOR; }
"while"     { return WHILE; }
"int"       { return INT; }
"float"     { return FLOAT; }
"string"    { return STRING; }
"bool"      { return BOOL; }
"true"      { return TRUE; }
"false"     { return FALSE; }
"continue"  { return CONTINUE; }
"break"     { return BREAK; }
"\n"        { ; }
"\t"        { ; }
" "         { ; }
{id}        { yylval.s_val = (char*)malloc(strlen(yytext) + 1);
              strcpy(yylval.s_val, yytext);
              return IDENT; }
{inumber}   { yylval.i_val = atoi(yytext);
              return INT_LIT; }
{fnumber}   { yylval.f_val = atof(yytext);
              return FLOAT_LIT; }
{string}    { yylval.s_val = (char*)malloc(strlen(yytext) - 1);
              strncpy(yylval.s_val, yytext + 1, strlen(yytext) - 2);
              return STRING_LIT; }
{comment_c} { ; }
{comment_cpp} { ; }

<<EOF>>     { yyterminate(); }
.           { ; }
%%
/*  C Code section */
int yywrap(void)
{
    return 1;
}